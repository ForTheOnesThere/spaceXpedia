{"version":3,"sources":["components/ScrollDownArrow/ScrollDownArrow.js","components/Countdown/Countdown.js","components/LaunchInformation/LaunchInformation.js","components/NavBar/NavBar.js","components/SearchBar/SearchBar.js","components/MissionCard/MissionCard.js","components/CardBoard/CardBoard.js","components/ViewWindow/ViewWindow.js","components/DetailWindow/DetailWindow.js","components/LookupViewer/LookupViewer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ScrollDownArrow","className","Countdown","props","updateTminusString","date","timeOfLaunch_unix","currentTimeUnixRaw","Date","now","secondsToLaunch","Math","floor","rawDays","roundedDays","rawHours","roundedHours","rawMinutes","roundedMinutes","seconds","tMinusTime","substr","setState","fetchLaunchData","a","fetch","response","json","data","state","nameOfNextLaunch","nextLaunchTimeUnix","dateString","id","this","selector","console","log","then","result","launch_date_unix","mission_name","toString","catch","e","setInterval","Component","LaunchInformation","patchUrl","launchInformation","flightNumber","launchSite","landingZone","missionName","redditLink","boosterFlightNumber","src","alt","href","landingRaw","rocket","first_stage","cores","landing_vehicle","links","mission_patch","details","flight_number","launch_site","site_name_long","reddit_campaign","flight","NavBar","onMissionSearchClick","onCoresSearchClick","onPayloadsSearchClick","onUpcomingSearchClick","currentView","onClick","SearchBar","MissionCard","photoLink","resourceClick","key","CardBoard","display","database","viewMode","missions","m","names","length","patchUrls","map","i","whatDoIShow","ViewWindow","children","DetailWindow","LookupViewer","isInfoView","App","buildDatabase","r","launch_sites","mission_patch_small","datesUNIX","videoUrls","video_link","primary_payloads","second_stage","payloads","payload_id","orbits","orbit","payload_masses","payload_mass_kg","success","launch_success","event","resourceRequested","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b1041b91.chunk.js","sourcesContent":["import React from 'react';\nimport '../../styles/ScrollDownArrow.css';\n\n// Adapted from a CodePen by https://codepen.io/xonic\nconst ScrollDownArrow = () => {\n  return(\n    <div className='scroll-master'>\n      <div className=\"scroll-container\">\n      <div className=\"chevron\"></div>\n      <div className=\"chevron\"></div>\n      <div className=\"chevron\"></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ScrollDownArrow;\n","import React, { Component } from 'react';\nimport ScrollIntoView from 'react-scroll-into-view';\nimport '../../styles/Countdown.css';\nimport ScrollDownArrow from '../ScrollDownArrow/ScrollDownArrow';\nimport 'tachyons';\n\nclass Countdown extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      nameOfNextLaunch: 'Loading...',\n      nextLaunchTimeUnix: 'Loading...',\n      tMinusTime: 'Loading...',\n      dateString: 'Loading...',\n    }\n  }\n\n  render(){\n    return(\n      <section id='countdown'>\n        <div className='countdown-container'>\n          <div className='display-container'>\n            <div className='launch-name c-element'>{this.state.nameOfNextLaunch}</div>\n            <div className='t-minus c-element'>\n              <span className='border'>\n                {this.state.tMinusTime}\n              </span>\n            </div>\n            <div className='launch-date c-element'>The launch is: {this.state.dateString}</div>\n          </div>\n\n          <div>\n            <ScrollIntoView selector='#launch-info'>\n              <ScrollDownArrow />\n            </ScrollIntoView>\n          </div>\n\n        </div>\n\n      </section>\n    )\n  }\n\n  componentDidMount(){\n    // Say whether the component is mounted and request the data from API\n    console.log(`Countdown component mounted successfully!`);\n    const data = this.fetchLaunchData();\n\n\n    // When the data is recieved, update the state...\n    data.then(result => {\n    let date = new Date(result.launch_date_unix*1000);\n    this.setState({nameOfNextLaunch: result.mission_name, nextLaunchTimeUnix: result.launch_date_unix, dateString: date.toString(),});\n      }).catch(e=>console.log(e));\n\n    // ...and then continuusly work out the 't-minus' time to launch, updating the state everytime it changes\n    setInterval(() => this.updateTminusString(this.state.nextLaunchTimeUnix),100);\n\n\n\n  }\n\n  updateTminusString = (date) => {\n    // Updates the state to reflect the time to the input, the 'date' variable\n    let timeOfLaunch_unix = date;\n\n    let currentTimeUnixRaw = Date.now()/1000;\n    let currentTimeUnix = Math.floor(currentTimeUnixRaw);\n    //.log(`The UNIX time of launch is ${timeOfLaunch_unix}`);\n    //console.log(`The UNIX time now is ${currentTimeUnix}`);\n\n    let secondsToLaunch = timeOfLaunch_unix - currentTimeUnix;\n    //console.log(`There are ${secondsToLaunch} seconds until launch.`);\n\n    let rawDays = secondsToLaunch/86400;\n    let roundedDays = Math.floor(rawDays);\n    //console.log(`There are ${roundedDays} whole days until launch.`);\n\n    let rawHours = (secondsToLaunch%86400)/3600;\n    let roundedHours = Math.floor(rawHours);\n    //console.log(`There are ${roundedHours} whole hours until launch.`);\n\n    let rawMinutes = ((secondsToLaunch%86400)%3600)/60;\n    let roundedMinutes = Math.floor(rawMinutes);\n    //console.log(`There are ${roundedMinutes} whole minutes until launch.`);\n\n    let seconds = secondsToLaunch - (86400*roundedDays) - (3600*roundedHours) - (60*roundedMinutes);\n    //console.log(`Finally, there are ${seconds} seconds left until launch.`);\n\n    //let longFormTime = `There are ${roundedDays} days, ${roundedHours} hours, ${roundedMinutes} minutes and ${seconds} seconds until launch.`;\n    let tMinusTime = `T- ${('00' + roundedDays).substr(-3)}:${('0' + roundedHours).substr(-2)}:${('0' + roundedMinutes).substr(-2)}:${('0' + seconds).substr(-2)}`\n    this.setState({tMinusTime: tMinusTime});\n  }\n\n  fetchLaunchData = async () => {\n    const response = await fetch('https://api.spacexdata.com/v3/launches/next');\n    const data = await response.json();\n    return data;\n  }\n\n}\n\nexport default Countdown;\n","import React, { Component } from 'react';\nimport '../../styles/LaunchInformation.css';\n\nclass LaunchInformation extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      patchUrl:  '',\n      launchInformation: 'Loading...',\n      flightNumber: 'Loading...',\n      launchSite: 'Loading...',\n      landingZone: 'Loading...',\n      missionName: 'Loading...',\n      redditLink: 'Loading...',\n      boosterFlightNumber: 'Loading...',\n    }\n  }\n\n  render(){\n    return(\n      <section id='launch-info'>\n        <div className='launch-info-container'>\n\n          <div className='info-display-container'>\n\n            <div className='info-top'>\n              <div>\n                <img src={this.state.patchUrl} alt='Mission Patch' />\n              </div>\n              <div className='launch-facts'>\n                <p>Mission: {this.state.missionName}\n                  <br></br>\n                  <br></br>\n                  This is launch number {this.state.flightNumber} for SpaceX\n                  <br></br>\n                  <br></br>\n                  Launch Site: {this.state.launchSite}\n                  <br></br>\n                  <br></br>\n                  Landing Zone: {this.state.landingZone}\n                  <br></br>\n                  <br></br>\n                  The first stage core has flown {this.state.boosterFlightNumber-1} times before. This will be flight number {this.state.boosterFlightNumber}.\n                  <br></br>\n                  <br></br>\n                  Be a part of the launch campaign with us on <a href={this.state.redditLink}>Reddit</a>!\n                </p>\n              </div>\n            </div>\n\n            <div className='info-bottom'>\n              <p className='scrollable'>{this.state.launchInformation}</p>\n            </div>\n\n          </div>\n\n        </div>\n      </section>\n    )\n  }\n\n  componentDidMount(){\n    // Say whether the component is mounted and request the data from API\n    console.log(`Launch Information component mounted successfully!`);\n    const data = this.fetchLaunchData();\n\n    // When the data is recieved, update the state...\n    data.then(result => {\n    let landingRaw = result.rocket.first_stage.cores[0].landing_vehicle;\n    let landingZone;\n    if (landingRaw === 'JRTI') {landingZone = 'Just Read The Instructions'}\n    else if (landingRaw === 'OCISLY') {landingZone = 'Of Course I Still Love You'}\n    else {landingZone = landingRaw};\n\n    this.setState({patchUrl: result.links.mission_patch,\n                   launchInformation: result.details,\n                   flightNumber: result.flight_number,\n                   launchSite: result.launch_site.site_name_long,\n                   landingZone: landingZone,\n                   missionName: result.mission_name,\n                   redditLink: result.links.reddit_campaign,\n                   boosterFlightNumber: result.rocket.first_stage.cores[0].flight});\n      }).catch(e=>console.log(e));\n\n    //page refresh will be needed to update after a launch\n\n\n\n  }\n\n\n\n  fetchLaunchData = async () => {\n    const response = await fetch('https://api.spacexdata.com/v3/launches/next');\n    const data = await response.json();\n    return data;\n  }\n\n}\n\nexport default LaunchInformation;\n","import React from 'react';\nimport '../../styles/NavBar.css';\n\nconst NavBar = ({ onMissionSearchClick, onCoresSearchClick, onPayloadsSearchClick, onUpcomingSearchClick, currentView }) => {\n  return (\n    <section id='nav-bar'>\n      <div className='nav-bar-container'>\n      <button id='missions' className={(currentView==='missions')?'active':'notActive'} onClick={onMissionSearchClick}>Missions</button>\n        <button id='cores' className={(currentView==='cores')?'active':'notActive'} onClick={onCoresSearchClick}>Cores</button>\n        <button id='payloads' className={(currentView==='payloads')?'active':'notActive'} onClick={onPayloadsSearchClick}>Landing Zones</button>\n        <button id='upcoming' className={(currentView==='upcoming')?'active':'notActive'} onClick={onUpcomingSearchClick}>Upcoming</button>\n      </div>\n    </section>\n  )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport '../../styles/SearchBar.css';\n\nconst SearchBar = () => {\n  return (\n    <section id='search-bar'>\n      <div className='search-bar-container'>\n      SEARCH BAR\n      </div>\n    </section>\n  )\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport 'tachyons';\nimport '../../styles/Card.css';\n\nconst MissionCard = ({ photoLink, missionName, id, resourceClick}) => {\n  return (\n    <div key={id} id={id} onClick={() => resourceClick(id)} className = 'mission-card grow tc dib br4 pa3 ma2 bw2 shadow-5'>\n      <div>\n        <img className='card-image' src={photoLink} alt='missionName' />\n      </div>\n      <div className='card-title-container'>\n        {missionName}\n      </div>\n    </div>\n  )\n}\n\nexport default MissionCard;\n","import React from 'react';\n\nimport MissionCard from '../MissionCard/MissionCard';\n\nconst CardBoard = (props) => {\n\n\n  const whatDoIShow = () => {\n  const database = props.database;\n\n      switch (database.viewMode){\n        case 'missions':\n          let missions = []\n          for (let m=0;m<database.names.length;m++){\n            missions[m] = [database.names[m], database.patchUrls[m]];\n          }\n          return missions.map((e,i)=><MissionCard id={i} key={i} resourceClick={props.resourceClick} missionName={e[0]} photoLink={e[1]}/>);\n\n        default:\n          return 'Coming Soon!';\n      }\n  }\n\nlet display = whatDoIShow();\n\nreturn (<div>{display}</div>)\n\n}\n\nexport default CardBoard;\n","import React, { Component } from 'react';\nimport '../../styles/ViewWindow.css';\n\nclass ViewWindow extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n    }\n  }\n\n  render(){\n    return (\n      <section id='view'>\n        <div className='view-window-container'>\n          <div className='view-display'>\n            {this.props.children}\n          </div>\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default ViewWindow;\n","import React from 'react';\n\nimport '../../styles/DetailWindow.css';\n\nconst DetailWindow = () => {\n\n  return (\n  <section id='detail-screen'>\n    <div className='detail-window-container'>\n      This is the detail view.\n    </div>\n  </section>\n\n\n  )\n\n}\n\nexport default DetailWindow;\n","import React from 'react';\nimport CardBoard from '../CardBoard/CardBoard';\nimport ViewWindow from '../ViewWindow/ViewWindow';\nimport DetailWindow from '../DetailWindow/DetailWindow';\n\nconst LookupViewer = (props) => {\n\n  if (props.database.isInfoView === false){\n    return (\n      <ViewWindow>\n        <CardBoard database={props.database} resourceClick={props.resourceClick}/>\n      </ViewWindow>\n    )\n  }\n  else{\n    return <DetailWindow />\n  }\n}\n\nexport default LookupViewer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Countdown from '../Countdown/Countdown';\nimport LaunchInformation from '../LaunchInformation/LaunchInformation';\nimport NavBar from '../NavBar/NavBar';\nimport SearchBar from '../SearchBar/SearchBar';\nimport LookupViewer from '../LookupViewer/LookupViewer';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      viewMode: 'missions',\n      isInfoView: false,\n      resourceRequested: '',\n      names: [],\n      launch_sites: [],\n      patchUrls: [],\n      datesUNIX: [],\n      details: [],\n      videoUrls: [],\n      primary_payloads: [],\n      orbits: [],\n      payload_masses: [],\n      success: [],\n    }\n  }\n\n  componentDidMount(){\n    console.log('App successfully mounted!');\n    this.buildDatabase();\n\n  }\n\n\n  buildDatabase = async () => {\n    try{\n      let r = await this.fetchLaunchData();\n      let names = r.map(e=>e.mission_name);\n      let launch_sites = r.map(e=>e.launch_site.site_name_long);\n      let patchUrls = r.map(e=>e.links.mission_patch_small);\n      let datesUNIX = r.map(e=>e.launch_date_unix);\n      let details = r.map(e=>e.details);\n      let videoUrls = r.map(e=>e.links.video_link);\n      let primary_payloads = r.map(e=>e.rocket.second_stage.payloads[0].payload_id);\n      let orbits = r.map(e=>e.rocket.second_stage.payloads[0].orbit);\n      let payload_masses = r.map(e=>e.rocket.second_stage.payloads[0].payload_mass_kg);\n      let success = r.map(e=>e.launch_success);\n\n      this.setState({\n        names: names,\n        launch_sites: launch_sites,\n        patchUrls: patchUrls,\n        datesUNIX: datesUNIX,\n        details: details,\n        videoUrls: videoUrls,\n        primary_payloads: primary_payloads,\n        orbits: orbits,\n        payload_masses: payload_masses,\n        success: success,\n\n      });\n      console.log('database built correctly!');\n    } catch (err) {console.log('Looks like somethings wrong...',err)}\n\n\n\n\n  }\n\n\n  fetchLaunchData = async () => {\n    const response = await fetch('https://api.spacexdata.com/v3/launches/past');\n    const data = await response.json();\n    return data;\n  }\n\n\n  onMissionSearchClick = (event) => {\n    this.setState({viewMode: 'missions', isInfoView: false});\n  }\n\n  onCoresSearchClick = (event) => {\n    this.setState({viewMode: 'cores', isInfoView: false});\n  }\n\n  onPayloadsSearchClick = (event) => {\n    this.setState({viewMode: 'payloads', isInfoView: false});\n  }\n\n  onUpcomingSearchClick = (event) => {\n    this.setState({viewMode: 'upcoming', isInfoView: false});\n  }\n\n  resourceClick = (id) => {\n    this.setState({resourceRequested: id, isInfoView: true});\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <Countdown />\n      <LaunchInformation />\n      <NavBar onMissionSearchClick={this.onMissionSearchClick}\n                 onCoresSearchClick={this.onCoresSearchClick}\n                 onPayloadsSearchClick={this.onPayloadsSearchClick}\n                 onUpcomingSearchClick={this.onUpcomingSearchClick}\n                 currentView={this.state.viewMode}\n      />\n      <SearchBar />\n      <LookupViewer database={this.state} resourceClick={this.resourceClick}/>\n    </div>\n  )\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}